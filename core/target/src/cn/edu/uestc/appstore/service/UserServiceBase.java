// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package cn.edu.uestc.appstore.service;

/**
 * <p>
 * Spring Service base class for <code>cn.edu.uestc.appstore.service.UserService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see cn.edu.uestc.appstore.service.UserService
 */
public abstract class UserServiceBase
    implements cn.edu.uestc.appstore.service.UserService
{

    private cn.edu.uestc.appstore.domain.UserDao userDao;

    /**
     * Sets the reference to <code>user</code>'s DAO.
     */
    public void setUserDao(cn.edu.uestc.appstore.domain.UserDao userDao)
    {
        this.userDao = userDao;
    }

    /**
     * Gets the reference to <code>user</code>'s DAO.
     */
    protected cn.edu.uestc.appstore.domain.UserDao getUserDao()
    {
        return this.userDao;
    }

    /**
     * @see cn.edu.uestc.appstore.service.UserService#getAllUsers()
     */
    public cn.edu.uestc.appstore.vo.UserVO[] getAllUsers()
    {
        try
        {
            return this.handleGetAllUsers();
        }
        catch (Throwable th)
        {
            throw new cn.edu.uestc.appstore.service.UserServiceException(
                "Error performing 'cn.edu.uestc.appstore.service.UserService.getAllUsers()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getAllUsers()}
      */
    protected abstract cn.edu.uestc.appstore.vo.UserVO[] handleGetAllUsers()
        throws java.lang.Exception;

    /**
     * @see cn.edu.uestc.appstore.service.UserService#getUser(java.lang.String)
     */
    public cn.edu.uestc.appstore.vo.UserVO getUser(final java.lang.String username)
    {
        if (username == null || username.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "cn.edu.uestc.appstore.service.UserService.getUser(java.lang.String username) - 'username' can not be null or empty");
        }
        try
        {
            return this.handleGetUser(username);
        }
        catch (Throwable th)
        {
            throw new cn.edu.uestc.appstore.service.UserServiceException(
                "Error performing 'cn.edu.uestc.appstore.service.UserService.getUser(java.lang.String username)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getUser(java.lang.String)}
      */
    protected abstract cn.edu.uestc.appstore.vo.UserVO handleGetUser(java.lang.String username)
        throws java.lang.Exception;

    /**
     * @see cn.edu.uestc.appstore.service.UserService#regUser(java.lang.String, java.lang.String)
     */
    public void regUser(final java.lang.String username, final java.lang.String password)
    {
        if (username == null || username.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "cn.edu.uestc.appstore.service.UserService.regUser(java.lang.String username, java.lang.String password) - 'username' can not be null or empty");
        }
        if (password == null || password.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "cn.edu.uestc.appstore.service.UserService.regUser(java.lang.String username, java.lang.String password) - 'password' can not be null or empty");
        }
        try
        {
            this.handleRegUser(username, password);
        }
        catch (Throwable th)
        {
            throw new cn.edu.uestc.appstore.service.UserServiceException(
                "Error performing 'cn.edu.uestc.appstore.service.UserService.regUser(java.lang.String username, java.lang.String password)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #regUser(java.lang.String, java.lang.String)}
      */
    protected abstract void handleRegUser(java.lang.String username, java.lang.String password)
        throws java.lang.Exception;

    /**
     * @see cn.edu.uestc.appstore.service.UserService#deleteUser(java.lang.Long)
     */
    public void deleteUser(final java.lang.Long userId)
    {
        if (userId == null)
        {
            throw new IllegalArgumentException(
                "cn.edu.uestc.appstore.service.UserService.deleteUser(java.lang.Long userId) - 'userId' can not be null");
        }
        try
        {
            this.handleDeleteUser(userId);
        }
        catch (Throwable th)
        {
            throw new cn.edu.uestc.appstore.service.UserServiceException(
                "Error performing 'cn.edu.uestc.appstore.service.UserService.deleteUser(java.lang.Long userId)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #deleteUser(java.lang.Long)}
      */
    protected abstract void handleDeleteUser(java.lang.Long userId)
        throws java.lang.Exception;

    /**
     * @see cn.edu.uestc.appstore.service.UserService#updateUser(cn.edu.uestc.appstore.vo.UserVO)
     */
    public void updateUser(final cn.edu.uestc.appstore.vo.UserVO userVO)
    {
        try
        {
            this.handleUpdateUser(userVO);
        }
        catch (Throwable th)
        {
            throw new cn.edu.uestc.appstore.service.UserServiceException(
                "Error performing 'cn.edu.uestc.appstore.service.UserService.updateUser(cn.edu.uestc.appstore.vo.UserVO userVO)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #updateUser(cn.edu.uestc.appstore.vo.UserVO)}
      */
    protected abstract void handleUpdateUser(cn.edu.uestc.appstore.vo.UserVO userVO)
        throws java.lang.Exception;

    /**
     * @see cn.edu.uestc.appstore.service.UserService#activeUser(java.lang.String, java.lang.Boolean)
     */
    public void activeUser(final java.lang.String username, final java.lang.Boolean isActive)
    {
        if (username == null || username.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "cn.edu.uestc.appstore.service.UserService.activeUser(java.lang.String username, java.lang.Boolean isActive) - 'username' can not be null or empty");
        }
        if (isActive == null)
        {
            throw new IllegalArgumentException(
                "cn.edu.uestc.appstore.service.UserService.activeUser(java.lang.String username, java.lang.Boolean isActive) - 'isActive' can not be null");
        }
        try
        {
            this.handleActiveUser(username, isActive);
        }
        catch (Throwable th)
        {
            throw new cn.edu.uestc.appstore.service.UserServiceException(
                "Error performing 'cn.edu.uestc.appstore.service.UserService.activeUser(java.lang.String username, java.lang.Boolean isActive)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #activeUser(java.lang.String, java.lang.Boolean)}
      */
    protected abstract void handleActiveUser(java.lang.String username, java.lang.Boolean isActive)
        throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return cn.edu.uestc.appstore.PrincipalStore.get();
    }

    /**
     * Gets the message source available to this service.
     */
    protected org.springframework.context.MessageSource getMessages()
    {
        return (org.springframework.context.MessageSource)
            cn.edu.uestc.appstore.BeanLocator.instance().getBean("messageSource");
    }

    /**
     * Gets the message having the given <code>key</code> in the underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     */
    protected String getMessage(final String key)
    {
        return this.getMessages().getMessage(key, null, null);
    }

    /**
     * Gets the message having the given <code>key</code> and <code>arguments</code> in the
     * underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     */
    protected String getMessage(final String key, final Object[] arguments)
    {
        return this.getMessages().getMessage(key, arguments, null);
    }

    /**
     * Gets the message having the given <code>key</code> using the given <code>arguments</code>
     * for the given <code>locale</code>.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @param locale the locale of the messages to retrieve.
     */
    protected String getMessage(
        final java.lang.String key, final java.lang.Object[] arguments,
        final java.util.Locale locale)
    {
        return this.getMessages().getMessage(key, arguments, locale);
    }

}