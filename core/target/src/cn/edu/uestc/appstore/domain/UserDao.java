// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringDao.vsl in andromda-spring-cartridge.
//
package cn.edu.uestc.appstore.domain;

/**
 * @see cn.edu.uestc.appstore.domain.User
 */
public interface UserDao
{
    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes no transformation will occur.
     */
    public final static int TRANSFORM_NONE = 0;


    /**
     * Transforms the given results to a collection of {@link com.lighthousepmg.plz.domain.messaging.persistence.CommunicationCategory}
     * instances (this is useful when the returned results contains a row of data and you want just entities only).
     *
     * @param the query results.
     */
    public void toEntities(final java.util.Collection results);

    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes entities must be transformed into objects of type
     * {@link cn.edu.uestc.appstore.vo.UserVO}.
     */
    public final static int TRANSFORM_USERVO = 1;

    /**
     * Copies the fields of the specified entity to the target value object. This method is similar to
     * toUserVO(), but it does not handle any attributes in the target
     * value object that are "read-only" (as those do not have setter methods exposed).
     */
    public void toUserVO(
        cn.edu.uestc.appstore.domain.User source,
        cn.edu.uestc.appstore.vo.UserVO target);


    /**
     * Converts this DAO's entity to an object of type {@link cn.edu.uestc.appstore.vo.UserVO}.
     */
    public cn.edu.uestc.appstore.vo.UserVO toUserVO(cn.edu.uestc.appstore.domain.User entity);

    /**
     * Converts this DAO's entity to a Collection of instances of type {@link cn.edu.uestc.appstore.vo.UserVO}.
     */
    public void toUserVOCollection(java.util.Collection entities);

    /**
     * Converts this DAO's entity to an array of instances of type {@link cn.edu.uestc.appstore.vo.UserVO}.
     */
    public cn.edu.uestc.appstore.vo.UserVO[] toUserVOArray(java.util.Collection entities);

    /**
     * Copies the fields of {@link cn.edu.uestc.appstore.vo.UserVO} to the specified entity.
     * @param copyIfNull If FALSE, the value object's field will not be copied to the entity if the value is NULL. If TRUE,
     * it will be copied regardless of its value.
     */
    public void userVOToEntity(
        cn.edu.uestc.appstore.vo.UserVO source,
        cn.edu.uestc.appstore.domain.User target,
        boolean copyIfNull);

    /**
     * Converts an instance of type {@link cn.edu.uestc.appstore.vo.UserVO} to this DAO's entity.
     */
    public cn.edu.uestc.appstore.domain.User userVOToEntity(cn.edu.uestc.appstore.vo.UserVO userVO);

    /**
     * Converts a Collection of instances of type {@link cn.edu.uestc.appstore.vo.UserVO} to this
     * DAO's entity.
     */
    public void userVOToEntityCollection(java.util.Collection instances);

    /**
     * Loads an instance of cn.edu.uestc.appstore.domain.User from the persistent store.
     */
    public cn.edu.uestc.appstore.domain.User load(java.lang.Long id);

    /**
     * <p>
     * Does the same thing as {@link #load(java.lang.Long)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined in this class then the result <strong>WILL BE</strong> passed through an operation which can
     * optionally transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param id the identifier of the entity to load.
     * @return either the entity or the object transformed from the entity.
     */
    public Object load(int transform, java.lang.Long id);

    /**
     * Loads all entities of type {@link cn.edu.uestc.appstore.domain.User}.
     *
     * @return the loaded entities.
     */
    public java.util.Collection loadAll();

    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @return the loaded entities.
     */
    public java.util.Collection loadAll(final int transform);

    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     *
     * @param pageNumber the page number to retrieve when paging results.
     * @param pageSize the size of the page to retrieve when paging results.
     * @return the loaded entities.
     */
    public java.util.Collection loadAll(final int pageNumber, final int pageSize);

    /**
     * <p>
     * Does the same thing as {@link #loadAll(int)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @param pageNumber the page number to retrieve when paging results.
     * @param pageSize the size of the page to retrieve when paging results.
     * @return the loaded entities.
     */
    public java.util.Collection loadAll(final int transform, final int pageNumber, final int pageSize);

    /**
     * Creates an instance of cn.edu.uestc.appstore.domain.User and adds it to the persistent store.
     */
    public cn.edu.uestc.appstore.domain.User create(cn.edu.uestc.appstore.domain.User user);

    /**
     * <p>
     * Does the same thing as {@link #create(cn.edu.uestc.appstore.domain.User)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     */
    public Object create(int transform, cn.edu.uestc.appstore.domain.User user);

    /**
     * Creates a new instance of cn.edu.uestc.appstore.domain.User and adds
     * from the passed in <code>entities</code> collection
     *
     * @param entities the collection of cn.edu.uestc.appstore.domain.User
     * instances to create.
     *
     * @return the created instances.
     */
    public java.util.Collection create(java.util.Collection entities);

    /**
     * <p>
     * Does the same thing as {@link #create(cn.edu.uestc.appstore.domain.User)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     */
    public java.util.Collection create(int transform, java.util.Collection entities);

    /**
     * <p>
     * Creates a new <code>cn.edu.uestc.appstore.domain.User</code>
     * instance from <strong>all</strong> attributes and adds it to
     * the persistent store.
     * </p>
     */
    public cn.edu.uestc.appstore.domain.User create(
        java.lang.String username,
        java.lang.String password,
        java.lang.String realName,
        java.lang.String email,
        java.lang.String phone,
        java.lang.String address,
        java.lang.String description,
        java.lang.String picture,
        java.lang.String question,
        java.lang.String answer,
        java.lang.Double point,
        java.lang.Boolean isActive,
        java.util.Date regTime,
        java.lang.String memo);

    /**
     * <p>
     * Does the same thing as {@link #create(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Double, java.lang.Boolean, java.util.Date, java.lang.String)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     */
    public Object create(
        int transform,
        java.lang.String username,
        java.lang.String password,
        java.lang.String realName,
        java.lang.String email,
        java.lang.String phone,
        java.lang.String address,
        java.lang.String description,
        java.lang.String picture,
        java.lang.String question,
        java.lang.String answer,
        java.lang.Double point,
        java.lang.Boolean isActive,
        java.util.Date regTime,
        java.lang.String memo);

    /**
     * <p>
     * Creates a new <code>cn.edu.uestc.appstore.domain.User</code>
     * instance from only <strong>required</strong> properties (attributes
     * and association ends) and adds it to the persistent store.
     * </p>
     */
    public cn.edu.uestc.appstore.domain.User create(
        java.lang.Boolean isActive,
        java.lang.String password,
        java.lang.Double point,
        java.util.Date regTime,
        cn.edu.uestc.appstore.domain.Role role,
        java.lang.String username);

    /**
     * <p>
     * Does the same thing as {@link #create(java.lang.String, java.lang.String, java.lang.Double, java.lang.Boolean, java.util.Date)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     */
    public Object create(
        int transform,
        java.lang.Boolean isActive,
        java.lang.String password,
        java.lang.Double point,
        java.util.Date regTime,
        cn.edu.uestc.appstore.domain.Role role,
        java.lang.String username);

    /**
     * Updates the <code>user</code> instance in the persistent store.
     */
    public void update(cn.edu.uestc.appstore.domain.User user);

    /**
     * Updates all instances in the <code>entities</code> collection in the persistent store.
     */
    public void update(java.util.Collection entities);

    /**
     * Removes the instance of cn.edu.uestc.appstore.domain.User from the persistent store.
     */
    public void remove(cn.edu.uestc.appstore.domain.User user);

    /**
     * Removes the instance of cn.edu.uestc.appstore.domain.User having the given
     * <code>identifier</code> from the persistent store.
     */
    public void remove(java.lang.Long id);

    /**
     * Removes all entities in the given <code>entities</code> collection.
     */
    public void remove(java.util.Collection entities);

    /**
     * 
     */
    public cn.edu.uestc.appstore.domain.User findByUsername(java.lang.String username);

    /**
     * <p>
     * Does the same thing as {@link #findByUsername(java.lang.String)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findByUsername(java.lang.String)}.
     * </p>
     */
    public cn.edu.uestc.appstore.domain.User findByUsername(String queryString, java.lang.String username);

    /**
     * <p>
     * Does the same thing as {@link #findByUsername(java.lang.String)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     */
    public java.lang.Object findByUsername(int transform, java.lang.String username);

    /**
     * <p>
     * Does the same thing as {@link #findByUsername(int, java.lang.String)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #findByUsername(int, java.lang.String username)}.
     * </p>
     */
    public java.lang.Object findByUsername(int transform, String queryString, java.lang.String username);


    /**
     * Does the same thing as {@link #search(int, cn.edu.uestc.appstore.Search) but with an
     * additional two flags called <code>pageNumber</code> and <code>pageSize</code>. These flags allow you to
     * limit your data to a specified page number and size.
     *
     * @param transform the transformation flag.
     * @param pageNumber the page number in the data to retrieve
     * @param pageSize the size of the page to retrieve.
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search wrapped in a {@link cn.edu.uestc.appstore.PaginationResult} instance.
     */
    public cn.edu.uestc.appstore.PaginationResult search(final int transform, final int pageNumber, final int pageSize, final cn.edu.uestc.appstore.Search search);

    /**
     * Does the same thing as {@link #search(cn.edu.uestc.appstore.Search) but with an
     * additional two flags called <code>pageNumber</code> and <code>pageSize</code>. These flags allow you to
     * limit your data to a specified page number and size.
     *
     * @param pageNumber the page number in the data to retrieve
     * @param pageSize the size of the page to retrieve.
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search wrapped in a {@link cn.edu.uestc.appstore.PaginationResult} instance.
     */
    public cn.edu.uestc.appstore.PaginationResult search(final int pageNumber, final int pageSize, final cn.edu.uestc.appstore.Search search);

    /**
     * Does the same thing as {@link #search(cn.edu.uestc.appstore.Search)} but with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     *
     * @param transform the transformation flag.
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search.
     */
    public java.util.Set search(final int transform, final cn.edu.uestc.appstore.Search search);

    /**
     * Performs a search using the parameters specified in the given <code>search</code> object.
     *
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search.
     */
    public java.util.Set search(final cn.edu.uestc.appstore.Search search);

    // spring-dao merge-point
}