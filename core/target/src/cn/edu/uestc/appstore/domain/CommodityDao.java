// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringDao.vsl in andromda-spring-cartridge.
//
package cn.edu.uestc.appstore.domain;

/**
 * @see cn.edu.uestc.appstore.domain.Commodity
 */
public interface CommodityDao
{
    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes no transformation will occur.
     */
    public final static int TRANSFORM_NONE = 0;


    /**
     * Transforms the given results to a collection of {@link com.lighthousepmg.plz.domain.messaging.persistence.CommunicationCategory}
     * instances (this is useful when the returned results contains a row of data and you want just entities only).
     *
     * @param the query results.
     */
    public void toEntities(final java.util.Collection results);

    /**
     * Loads an instance of cn.edu.uestc.appstore.domain.Commodity from the persistent store.
     */
    public cn.edu.uestc.appstore.domain.Commodity load(java.lang.Long id);

    /**
     * <p>
     * Does the same thing as {@link #load(java.lang.Long)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined in this class then the result <strong>WILL BE</strong> passed through an operation which can
     * optionally transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param id the identifier of the entity to load.
     * @return either the entity or the object transformed from the entity.
     */
    public Object load(int transform, java.lang.Long id);

    /**
     * Loads all entities of type {@link cn.edu.uestc.appstore.domain.Commodity}.
     *
     * @return the loaded entities.
     */
    public java.util.Collection loadAll();

    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @return the loaded entities.
     */
    public java.util.Collection loadAll(final int transform);

    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     *
     * @param pageNumber the page number to retrieve when paging results.
     * @param pageSize the size of the page to retrieve when paging results.
     * @return the loaded entities.
     */
    public java.util.Collection loadAll(final int pageNumber, final int pageSize);

    /**
     * <p>
     * Does the same thing as {@link #loadAll(int)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @param pageNumber the page number to retrieve when paging results.
     * @param pageSize the size of the page to retrieve when paging results.
     * @return the loaded entities.
     */
    public java.util.Collection loadAll(final int transform, final int pageNumber, final int pageSize);

    /**
     * Creates an instance of cn.edu.uestc.appstore.domain.Commodity and adds it to the persistent store.
     */
    public cn.edu.uestc.appstore.domain.Commodity create(cn.edu.uestc.appstore.domain.Commodity commodity);

    /**
     * <p>
     * Does the same thing as {@link #create(cn.edu.uestc.appstore.domain.Commodity)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     */
    public Object create(int transform, cn.edu.uestc.appstore.domain.Commodity commodity);

    /**
     * Creates a new instance of cn.edu.uestc.appstore.domain.Commodity and adds
     * from the passed in <code>entities</code> collection
     *
     * @param entities the collection of cn.edu.uestc.appstore.domain.Commodity
     * instances to create.
     *
     * @return the created instances.
     */
    public java.util.Collection create(java.util.Collection entities);

    /**
     * <p>
     * Does the same thing as {@link #create(cn.edu.uestc.appstore.domain.Commodity)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     */
    public java.util.Collection create(int transform, java.util.Collection entities);

    /**
     * <p>
     * Creates a new <code>cn.edu.uestc.appstore.domain.Commodity</code>
     * instance from <strong>all</strong> attributes and adds it to
     * the persistent store.
     * </p>
     */
    public cn.edu.uestc.appstore.domain.Commodity create(
        java.lang.String name,
        java.lang.String type,
        java.lang.Float price,
        long size,
        java.lang.String language,
        java.util.Date addedTime,
        java.lang.Integer totalSale,
        java.lang.String version,
        java.lang.String path,
        java.lang.String pic,
        java.lang.String introduce,
        java.lang.Boolean isFree,
        java.lang.Boolean isOff,
        java.lang.String developer,
        java.lang.String tag,
        java.lang.String runEnv);

    /**
     * <p>
     * Does the same thing as {@link #create(java.lang.String, java.lang.String, java.lang.Float, long, java.lang.String, java.util.Date, java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     */
    public Object create(
        int transform,
        java.lang.String name,
        java.lang.String type,
        java.lang.Float price,
        long size,
        java.lang.String language,
        java.util.Date addedTime,
        java.lang.Integer totalSale,
        java.lang.String version,
        java.lang.String path,
        java.lang.String pic,
        java.lang.String introduce,
        java.lang.Boolean isFree,
        java.lang.Boolean isOff,
        java.lang.String developer,
        java.lang.String tag,
        java.lang.String runEnv);

    /**
     * <p>
     * Creates a new <code>cn.edu.uestc.appstore.domain.Commodity</code>
     * instance from only <strong>required</strong> properties (attributes
     * and association ends) and adds it to the persistent store.
     * </p>
     */
    public cn.edu.uestc.appstore.domain.Commodity create(
        java.util.Date addedTime,
        cn.edu.uestc.appstore.domain.ComFirstCategory comFirstCategory,
        cn.edu.uestc.appstore.domain.ComSecondCategory comSecondCategory,
        java.lang.String developer,
        java.lang.Boolean isFree,
        java.lang.Boolean isOff,
        java.lang.String name,
        java.lang.String path,
        java.lang.String pic,
        java.lang.Float price,
        cn.edu.uestc.appstore.domain.Resouce resouce,
        java.lang.String runEnv,
        long size,
        java.lang.Integer totalSale);

    /**
     * <p>
     * Does the same thing as {@link #create(java.lang.String, java.lang.Float, long, java.util.Date, java.lang.Integer, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     */
    public Object create(
        int transform,
        java.util.Date addedTime,
        cn.edu.uestc.appstore.domain.ComFirstCategory comFirstCategory,
        cn.edu.uestc.appstore.domain.ComSecondCategory comSecondCategory,
        java.lang.String developer,
        java.lang.Boolean isFree,
        java.lang.Boolean isOff,
        java.lang.String name,
        java.lang.String path,
        java.lang.String pic,
        java.lang.Float price,
        cn.edu.uestc.appstore.domain.Resouce resouce,
        java.lang.String runEnv,
        long size,
        java.lang.Integer totalSale);

    /**
     * Updates the <code>commodity</code> instance in the persistent store.
     */
    public void update(cn.edu.uestc.appstore.domain.Commodity commodity);

    /**
     * Updates all instances in the <code>entities</code> collection in the persistent store.
     */
    public void update(java.util.Collection entities);

    /**
     * Removes the instance of cn.edu.uestc.appstore.domain.Commodity from the persistent store.
     */
    public void remove(cn.edu.uestc.appstore.domain.Commodity commodity);

    /**
     * Removes the instance of cn.edu.uestc.appstore.domain.Commodity having the given
     * <code>identifier</code> from the persistent store.
     */
    public void remove(java.lang.Long id);

    /**
     * Removes all entities in the given <code>entities</code> collection.
     */
    public void remove(java.util.Collection entities);


    /**
     * Does the same thing as {@link #search(int, cn.edu.uestc.appstore.Search) but with an
     * additional two flags called <code>pageNumber</code> and <code>pageSize</code>. These flags allow you to
     * limit your data to a specified page number and size.
     *
     * @param transform the transformation flag.
     * @param pageNumber the page number in the data to retrieve
     * @param pageSize the size of the page to retrieve.
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search wrapped in a {@link cn.edu.uestc.appstore.PaginationResult} instance.
     */
    public cn.edu.uestc.appstore.PaginationResult search(final int transform, final int pageNumber, final int pageSize, final cn.edu.uestc.appstore.Search search);

    /**
     * Does the same thing as {@link #search(cn.edu.uestc.appstore.Search) but with an
     * additional two flags called <code>pageNumber</code> and <code>pageSize</code>. These flags allow you to
     * limit your data to a specified page number and size.
     *
     * @param pageNumber the page number in the data to retrieve
     * @param pageSize the size of the page to retrieve.
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search wrapped in a {@link cn.edu.uestc.appstore.PaginationResult} instance.
     */
    public cn.edu.uestc.appstore.PaginationResult search(final int pageNumber, final int pageSize, final cn.edu.uestc.appstore.Search search);

    /**
     * Does the same thing as {@link #search(cn.edu.uestc.appstore.Search)} but with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     *
     * @param transform the transformation flag.
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search.
     */
    public java.util.Set search(final int transform, final cn.edu.uestc.appstore.Search search);

    /**
     * Performs a search using the parameters specified in the given <code>search</code> object.
     *
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search.
     */
    public java.util.Set search(final cn.edu.uestc.appstore.Search search);

    // spring-dao merge-point
}